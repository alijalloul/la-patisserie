// cartSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { CartItemType, CartState } from "./types";

const initialState: CartState = {
  cart: [],
};

const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addProduct: (
      state,
      action: PayloadAction<CartItemType>
    ) => {
      const existingProduct = state.cart.find(
        (item) => item.id === action.payload.id
      );
      if (existingProduct) {
        existingProduct.quantity += action.payload.quantity;
      } else {
        state.cart.push(action.payload );
      }
    },
    decrementProduct: (state, action: PayloadAction<string>) => {
      const existingProduct = state.cart.find(
        (item) => item.id === action.payload
      );
      if (existingProduct) {
        existingProduct.quantity -= 1;
        if (existingProduct.quantity <= 0) {
          state.cart = state.cart.filter((item) => item.id !== action.payload);
        }
      }
    },
    removeProduct: (state, action: PayloadAction<string>) => {
      state.cart = state.cart.filter((item) => item.id !== action.payload);
    },
    clearCart: (state) => {
      state.cart = [];
    },
  },
});

// Export the actions generated by createSlice
export const { addProduct, decrementProduct, removeProduct, clearCart } =
  cartSlice.actions;

// Export the reducer
export default cartSlice.reducer;
